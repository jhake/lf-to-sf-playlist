{"version":3,"sources":["types/index.ts","hooks/useCurrentUser.ts","components/Navbar/index.tsx","components/SpotifyTracks/index.tsx","pages/SpotifyStats/index.tsx","hooks/useUrlQuery.ts","hooks/useAxiosGet.ts","components/CreatePlaylist/index.tsx","pages/LastfmStats/LastfmInput.tsx","pages/LastfmStats/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["LfMethod","LfPeriod","cookieName","useCurrentUser","useCookies","cookies","removeCookie","currentUser","logout","Navbar","handleLogout","a","axios","delete","process","timeout","withCredentials","toast","success","response","status","error","message","to","onClick","SpotifyTracks","spotifyTrackIds","uniqueTrackIds","Set","map","spotifyTrackId","src","width","height","frameBorder","allowTransparency","allow","style","borderRadius","SpotifyStats","queryString","parse","useLocation","search","limit","offset","time_range","url","useState","data","setData","loading","setLoading","setError","useEffect","get","axiosResult","useAxiosGet","d","id","CreatePlaylist","handleClick","body","name","prompt","tracks","post","lfMethodOptions","label","value","topTracks","weeklyTrackChart","lfPeriodOptions","overall","week","month","quarter","half","year","LastfmInput","lfParams","setLfParams","startDate","Date","endDate","dateRange","setDateRange","handleInputChange","e","newParams","target","Number","options","placeholder","onChange","find","option","method","period","ranges","range1","Math","floor","type","user","LastfmStats","page","lfResult","setLfResult","sfResult","setSfResult","sfLoading","setSfLoading","loadCount","setLoadCount","lfTracks","toptracks","track","weeklytrackchart","handleSearch","param","console","log","handleLoad","queries","slice","lfTrack","artist","params","result","length","App","exact","path","component","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c6bdfdb2.chunk.js","sourcesContent":["export interface Token {\r\n  accessToken: string;\r\n}\r\n\r\nexport interface LfParams {\r\n  method?: LfMethod;\r\n  user?: string;\r\n  period?: string;\r\n  limit?: number;\r\n  page?: number;\r\n  from?: number;\r\n  to?: number;\r\n}\r\n\r\nexport enum LfMethod {\r\n  topTracks = \"user.getTopTracks\",\r\n  weeklyTrackChart = \"user.getWeeklyTrackChart\",\r\n}\r\n\r\nexport enum LfPeriod {\r\n  overall = \"overall\",\r\n  week = \"7day\",\r\n  month = \"1month\",\r\n  quarter = \"3month\",\r\n  half = \"6month\",\r\n  year = \"12month\",\r\n}\r\n","import { useCookies } from \"react-cookie\";\r\n\r\nconst cookieName = \"token\";\r\n\r\nexport const useCurrentUser = () => {\r\n  const [cookies, , removeCookie] = useCookies([cookieName]);\r\n\r\n  const currentUser = cookies[cookieName];\r\n\r\n  const logout = () => {\r\n    removeCookie(cookieName);\r\n  };\r\n\r\n  return { currentUser, logout };\r\n};\r\n","import { Link } from \"react-router-dom\";\r\nimport { toast } from \"react-toastify\";\r\nimport { useCurrentUser } from \"hooks/useCurrentUser\";\r\nimport axios from \"axios\";\r\n\r\nconst Navbar = () => {\r\n  const { currentUser, logout } = useCurrentUser();\r\n  const API_LOGOUT_URL = process.env.REACT_APP_BACKEND_API_URL + \"logout\";\r\n\r\n  const handleLogout = async () => {\r\n    try {\r\n      await axios.delete(API_LOGOUT_URL, {\r\n        timeout: 2000,\r\n        withCredentials: true,\r\n      });\r\n      logout();\r\n      toast.success(\"Logged out successfully.\");\r\n    } catch (error) {\r\n      if (error.response?.status === 401) {\r\n        toast.error(\"Please login again\");\r\n        logout();\r\n      } else toast.error(error.message);\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <Link to=\"/\">Home</Link>\r\n      {currentUser ? (\r\n        <>\r\n          <Link to=\"/spotify-stats\">Spotify Stats</Link>\r\n          <Link to=\"/lastfm-stats\">Lastfm Stats</Link>\r\n          <button\r\n            onClick={() => {\r\n              handleLogout();\r\n              // toast.success(\"Logged out\");\r\n            }}\r\n          >\r\n            Logout\r\n          </button>\r\n        </>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","interface Props {\r\n  spotifyTrackIds: Array<string>;\r\n}\r\n\r\nconst SpotifyTracks = ({ spotifyTrackIds }: Props) => {\r\n  let uniqueTrackIds = [...new Set([...spotifyTrackIds])];\r\n\r\n  return (\r\n    <>\r\n      {uniqueTrackIds?.map((spotifyTrackId) => {\r\n        return (\r\n          <iframe\r\n            key={spotifyTrackId}\r\n            src={`https://open.spotify.com/embed/track/${spotifyTrackId}`}\r\n            width={300}\r\n            height={380}\r\n            frameBorder={0}\r\n            allowTransparency={true}\r\n            allow=\"encrypted-media\"\r\n            style={{ borderRadius: \"10px\" }}\r\n          />\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SpotifyTracks;\r\n","import SpotifyTracks from \"components/SpotifyTracks\";\r\nimport { useAxiosGet } from \"hooks/useAxiosGet\";\r\nimport { useUrlQuery } from \"hooks/useUrlQuery\";\r\n\r\nconst SpotifyStats = () => {\r\n  const { limit, offset, time_range } = useUrlQuery();\r\n\r\n  const url =\r\n    process.env.REACT_APP_BACKEND_API_URL +\r\n    \"top_tracks?\" +\r\n    (limit ? `limit=${limit}&` : \"\") +\r\n    (offset ? `offset=${offset}&` : \"\") +\r\n    (time_range ? `time_range=${time_range}&` : \"\");\r\n\r\n  const { data, loading, error } = useAxiosGet<any[]>(url);\r\n\r\n  return (\r\n    <>\r\n      <h1>Spotify Stats</h1>\r\n      {loading ? (\r\n        \"loading\"\r\n      ) : (\r\n        <SpotifyTracks spotifyTrackIds={data?.map((d) => d.id) ?? []} />\r\n      )}\r\n      {error && \"errors occured\"}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SpotifyStats;\r\n","import { useLocation } from \"react-router-dom\";\r\nimport queryString from \"query-string\";\r\n\r\nexport const useUrlQuery = () => {\r\n  return queryString.parse(useLocation().search);\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useCurrentUser } from \"./useCurrentUser\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nexport const useAxiosGet = <T>(url: string, timeout: number = 10000) => {\r\n  const [data, setData] = useState<T>();\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState();\r\n  const { logout } = useCurrentUser();\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      try {\r\n        let axiosResult = await axios.get(url, {\r\n          timeout: timeout,\r\n          withCredentials: true,\r\n        });\r\n\r\n        setData(axiosResult.data);\r\n        setLoading(false);\r\n      } catch (error) {\r\n        if (error.response?.status === 401) {\r\n          toast.error(\"Please login again\");\r\n          logout();\r\n        } else {\r\n          setError(error);\r\n          setLoading(false);\r\n        }\r\n      }\r\n    })();\r\n    // eslint-disable-next-line\r\n  }, [url]);\r\n\r\n  return { data, loading, error };\r\n};\r\n","import axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { useCurrentUser } from \"hooks/useCurrentUser\";\r\n\r\ninterface Props {\r\n  spotifyTrackIds: Array<string>;\r\n}\r\n\r\nconst CreatePlaylist = (\r\n  { spotifyTrackIds }: Props = { spotifyTrackIds: [] }\r\n) => {\r\n  const { logout } = useCurrentUser();\r\n\r\n  const handleClick = async () => {\r\n    const url = process.env.REACT_APP_BACKEND_API_URL + \"create_playlist\";\r\n    const body = {\r\n      name: prompt(\"Enter name\", \"New Playlist\"),\r\n      tracks: spotifyTrackIds.map(\r\n        (spotifyTrackId) => `spotify:track:${spotifyTrackId}`\r\n      ),\r\n    };\r\n\r\n    try {\r\n      await axios.post(url, body, {\r\n        timeout: 2000,\r\n        withCredentials: true,\r\n      });\r\n      toast.success(\"Playlist created!\");\r\n    } catch (error) {\r\n      if (error.response?.status === 401) {\r\n        toast.error(\"Please login again\");\r\n        logout();\r\n      } else {\r\n        toast.error(error.response ? error.response.data.error : error.message);\r\n      }\r\n    }\r\n  };\r\n\r\n  return <button onClick={handleClick}>Create Playlist</button>;\r\n};\r\n\r\nexport default CreatePlaylist;\r\n","import Select from \"react-select\";\r\nimport { useState, Dispatch, SetStateAction } from \"react\";\r\nimport { DateRangePicker } from \"react-date-range\";\r\nimport \"react-date-range/dist/styles.css\"; // main style file\r\nimport \"react-date-range/dist/theme/default.css\"; // theme css file\r\n\r\nimport { LfParams, LfMethod, LfPeriod } from \"types\";\r\n\r\nexport const lfMethodOptions = [\r\n  { label: \"Top Tracks\", value: LfMethod.topTracks },\r\n  { label: \"Specific Time Period\", value: LfMethod.weeklyTrackChart },\r\n];\r\n\r\nexport const lfPeriodOptions = [\r\n  { label: \"Overall\", value: LfPeriod.overall },\r\n  { label: \"Last 7 days\", value: LfPeriod.week },\r\n  { label: \"Last month\", value: LfPeriod.month },\r\n  { label: \"Last 3 months\", value: LfPeriod.quarter },\r\n  { label: \"Last 6 months\", value: LfPeriod.half },\r\n  { label: \"Last year\", value: LfPeriod.year },\r\n];\r\n\r\ninterface Props {\r\n  lfParams: LfParams;\r\n  setLfParams: Dispatch<SetStateAction<LfParams>>;\r\n}\r\n\r\nconst LastfmInput = ({ lfParams, setLfParams }: Props) => {\r\n  const [dateRange, setDateRange] = useState<{\r\n    startDate: Date;\r\n    endDate: Date;\r\n  }>({ startDate: new Date(), endDate: new Date() });\r\n\r\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    let newParams = { ...lfParams };\r\n    if (e.target.id === \"user\") {\r\n      newParams[e.target.id] = e.target.value as string;\r\n    } else if (e.target.id === \"limit\" || e.target.id === \"page\") {\r\n      newParams[e.target.id] = Number(e.target.value);\r\n    }\r\n    setLfParams(newParams);\r\n  };\r\n\r\n  const handleMethodChange = ({ value }: any) => {\r\n    let newParams = { ...lfParams };\r\n    newParams[\"method\"] = value;\r\n    setLfParams(newParams);\r\n  };\r\n\r\n  const handlePeriodChange = ({ value }: any) => {\r\n    let newParams = { ...lfParams };\r\n    newParams[\"period\"] = value;\r\n    setLfParams(newParams);\r\n  };\r\n\r\n  const handleRangeChange = (ranges: any) => {\r\n    setDateRange(ranges.range1);\r\n\r\n    let newParams = { ...lfParams };\r\n    newParams[\"from\"] = Math.floor(ranges.range1.startDate / 1000);\r\n    newParams[\"to\"] = Math.floor(ranges.range1.endDate / 1000);\r\n    setLfParams(newParams);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Select\r\n        options={lfMethodOptions}\r\n        placeholder=\"method\"\r\n        onChange={handleMethodChange}\r\n        value={lfMethodOptions.find((option) => {\r\n          return option.value === lfParams.method;\r\n        })}\r\n      />\r\n      {lfParams.method === LfMethod.topTracks ? (\r\n        <Select\r\n          options={lfPeriodOptions}\r\n          placeholder=\"period\"\r\n          onChange={handlePeriodChange}\r\n          value={lfPeriodOptions.find((option) => {\r\n            return option.value === lfParams.period;\r\n          })}\r\n        />\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      {lfParams.method === LfMethod.weeklyTrackChart ? (\r\n        <DateRangePicker ranges={[dateRange]} onChange={handleRangeChange} />\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      <input\r\n        id=\"user\"\r\n        type=\"text\"\r\n        placeholder=\"lastfm username\"\r\n        onChange={handleInputChange}\r\n        value={lfParams.user}\r\n      />\r\n      <input\r\n        id=\"limit\"\r\n        type=\"number\"\r\n        placeholder=\"limit\"\r\n        onChange={handleInputChange}\r\n        value={lfParams.limit}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LastfmInput;\r\n","import axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nimport SpotifyTracks from \"components/SpotifyTracks\";\r\nimport { useCurrentUser } from \"hooks/useCurrentUser\";\r\nimport CreatePlaylist from \"components/CreatePlaylist\";\r\nimport { LfParams, LfMethod, LfPeriod } from \"types\";\r\n\r\nimport LastfmInput from \"./LastfmInput\";\r\n\r\nconst LastfmStats = () => {\r\n  const { logout } = useCurrentUser();\r\n  const [lfParams, setLfParams] = useState<LfParams>({\r\n    method: LfMethod.topTracks,\r\n    user: \"\",\r\n    period: LfPeriod.overall,\r\n    limit: 100,\r\n    page: 1,\r\n  });\r\n  const [lfResult, setLfResult] = useState<any>();\r\n  const [sfResult, setSfResult] = useState<Array<any>>([]);\r\n  const [sfLoading, setSfLoading] = useState(false);\r\n  const [loadCount, setLoadCount] = useState(0);\r\n\r\n  const lfTracks =\r\n    (lfParams?.method === LfMethod.topTracks\r\n      ? lfResult?.toptracks?.track\r\n      : lfResult?.weeklytrackchart?.track) ?? [];\r\n\r\n  const handleSearch = async () => {\r\n    let url = process.env.REACT_APP_BACKEND_API_URL + \"lf_get_request?\";\r\n    for (const param in lfParams) {\r\n      console.log((lfParams as any)[param]);\r\n      url += `${param}=${(lfParams as any)[param]}&`;\r\n    }\r\n    try {\r\n      let axiosResult = await axios.get(url, { withCredentials: true });\r\n      setLfResult(axiosResult.data);\r\n      setLoadCount(0);\r\n      setSfResult([]);\r\n    } catch (error) {\r\n      if (error.response?.status === 401) {\r\n        toast.error(\"Please login again\");\r\n        logout();\r\n      } else toast.error(\"An error occured when loading the lf tracks\");\r\n    }\r\n  };\r\n\r\n  console.log({ loadCount });\r\n  const handleLoad = async () => {\r\n    let url = process.env.REACT_APP_BACKEND_API_URL + \"search_spotify_tracks?\";\r\n\r\n    let queries = lfTracks\r\n      .slice(loadCount, loadCount + 10)\r\n      .map((lfTrack: any) => {\r\n        return `${lfTrack.name} ${\r\n          lfTrack.artist.name || lfTrack.artist[\"#text\"]\r\n        }`;\r\n      });\r\n\r\n    // let queries = [\"now or never april\", \"Now or Never April\"];\r\n    console.log(queries);\r\n    setSfLoading(true);\r\n    try {\r\n      let result = await axios.get<Array<any>>(url, {\r\n        timeout: 50000,\r\n        params: { queries },\r\n        withCredentials: true,\r\n      });\r\n      setSfResult([...sfResult, ...result.data]);\r\n      setLoadCount(loadCount + 10);\r\n    } catch (error) {\r\n      if (error.response?.status === 401) {\r\n        toast.error(\"Please login again\");\r\n        logout();\r\n      } else toast.error(error.message);\r\n    }\r\n    setSfLoading(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h1>LastFM stats</h1>\r\n      <button onClick={handleSearch}>LastFM Search</button>\r\n      <LastfmInput lfParams={lfParams} setLfParams={setLfParams} />\r\n      <CreatePlaylist\r\n        spotifyTrackIds={sfResult?.map((d) => d?.id as string) ?? []}\r\n      />\r\n      <br />\r\n      <SpotifyTracks\r\n        spotifyTrackIds={sfResult?.map((d) => d?.id as string) ?? []}\r\n      />\r\n      <br />\r\n      {sfLoading ? (\r\n        \"Loading\"\r\n      ) : loadCount < lfTracks.length ? (\r\n        <button onClick={handleLoad}>Load more</button>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LastfmStats;\r\n","import {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Redirect,\r\n} from \"react-router-dom\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nimport { useCurrentUser } from \"hooks/useCurrentUser\";\r\n\r\nimport Navbar from \"components/Navbar\";\r\nimport SpotifyStats from \"pages/SpotifyStats\";\r\nimport LastfmStats from \"pages/LastfmStats\";\r\nimport { useEffect } from \"react\";\r\n\r\nif (!process.env.REACT_APP_BACKEND_API_URL) {\r\n  throw new Error(\"REACT_APP_BACKEND_API_URL not defined.\");\r\n}\r\n\r\nconst API_LOGIN_URL = process.env.REACT_APP_BACKEND_API_URL + \"auth/spotify\";\r\n\r\nfunction App() {\r\n  const { currentUser } = useCurrentUser();\r\n  useEffect(() => {\r\n    if (currentUser) toast.success(\"Successfully logged in!\");\r\n  }, [currentUser]);\r\n  return (\r\n    <>\r\n      <Router>\r\n        <Switch>\r\n          {!currentUser ? (\r\n            <>\r\n              <Route\r\n                exact\r\n                path=\"/\"\r\n                component={() => <a href={API_LOGIN_URL}>Login with Spotify</a>}\r\n              />\r\n              <Redirect to=\"/\" />\r\n            </>\r\n          ) : (\r\n            <>\r\n              <Navbar />\r\n              <Route exact path=\"/\" component={() => <h1>HOMEPAGE</h1>} />\r\n              <Route exact path=\"/spotify-stats\" component={SpotifyStats} />\r\n              <Route exact path=\"/lastfm-stats\" component={LastfmStats} />\r\n            </>\r\n          )}\r\n        </Switch>\r\n      </Router>\r\n\r\n      <ToastContainer />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}